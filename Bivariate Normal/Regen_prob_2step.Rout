
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1234)
> 
> source("Data_gen.R")
> 
> load("Expected_S.Rdata")
> #load("1step.Rdata")
> library(mcmcse)
> 
> 
> reps = 100
> R = rep(0, reps)
> regVAR2 = matrix(0, nrow = reps, ncol = 4)
> BMopt = matrix(0, nrow = reps, ncol = 4)
> BMsq = matrix(0, nrow = reps, ncol = 4)
> 
> ess_reg2 = rep(0, reps)
> ess_bmopt = rep(0, reps)
> ess_bmsq = rep(0, reps)
> 
> for (k in 1:reps) {
+ 	dat = Gen_data(nsim)
+ 	regens = rbinom(nsim, 1, Es*dat$s)
+ 
+ 	regen1e4 = regens[1:1e4]
+ 	regen1e5 = regens[1:1e5]
+ 	regen1e6 = regens[1:1e6]
+ 	regen1e7 = regens[1:1e7]
+ 
+ 
+ 	# Individual regeneration times
+ 	regen_times_4 = (which(regen1e4 == 1)) - append(c(0), which(regen1e4 == 1)[-length(which(regen1e4 == 1))])
+ 	regen_times_5 = (which(regen1e5 == 1)) - append(c(0), which(regen1e5 == 1)[-length(which(regen1e5 == 1))])
+ 	regen_times_6 = (which(regen1e6 == 1)) - append(c(0), which(regen1e6 == 1)[-length(which(regen1e6 == 1))])
+ 	regen_times_7 = (which(regen1e7 == 1)) - append(c(0), which(regen1e7 == 1)[-length(which(regen1e7 == 1))])
+ 
+ 
+ 	T4 = append(c(0),which(regen1e4 == 1))
+ 	Z4 = matrix(0, nrow = sum(regen1e4), ncol = 2)
+ 
+ 	for(i in 1:(length(T4)-1)){
+ 		for(j in (T4[i] + 1):T4[i+1]){
+ 			Z4[i,1] = Z4[i,1] + dat$x[j]
+ 			Z4[i,2] = Z4[i,2] + dat$y[j]
+ 		}
+ 	}
+ 
+ 	T5 = append(c(0),which(regen1e5 == 1))
+ 	Z5 = matrix(0, nrow = sum(regen1e5), ncol = 2)
+ 
+ 	for(i in 1:(length(T5)-1)){
+ 		for(j in (T5[i] + 1):T5[i+1]){
+ 			Z5[i,1] = Z5[i,1] + dat$x[j]
+ 			Z5[i,2] = Z5[i,2] + dat$y[j]
+ 		}
+ 	}
+ 
+ 	T6 = append(c(0),which(regen1e6 == 1))
+ 	Z6 = matrix(0, nrow = sum(regen1e6), ncol = 2)
+ 
+ 	for(i in 1:(length(T6)-1)){
+ 		for(j in (T6[i] + 1):T6[i+1]){
+ 			Z6[i,1] = Z6[i,1] + dat$x[j]
+ 			Z6[i,2] = Z6[i,2] + dat$y[j]
+ 		}
+ 	}
+ 
+ 	T7 = append(c(0),which(regen1e7 == 1))
+ 	Z7 = matrix(0, nrow = sum(regen1e7), ncol = 2)
+ 
+ 	for(i in 1:(length(T7)-1)){
+ 		for(j in (T7[i] + 1):T7[i+1]){
+ 			Z7[i,1] = Z7[i,1] + dat$x[j]
+ 			Z7[i,2] = Z7[i,2] + dat$y[j]
+ 		}
+ 	}
+ 
+ 	dataset = cbind(dat$x, dat$y)
+ 
+ 
+ 	dat1e4 = dataset[1:1e4,]
+ 	dat1e5 = dataset[1:1e5,]
+ 	dat1e6 = dataset[1:1e6,]
+ 	dat1e7 = dataset[1:1e7,]
+ 
+ 	ess_reg2[k] = multiESS(dataset, covmat = variance(Z7, regen_times_7))
+ 	ess_bmsq[k] = multiESS(dataset, covmat = mcse.multi(dat1e7, method = "bm", r = 1, size = floor((1e4)^(1/2 + .00001)))$cov)
+ 	ess_bmopt[k] = multiESS(dataset, covmat = mcse.multi(dat1e7, method = "bm", r = 1)$cov)
+ 	
+ 
+ 	regVAR2[k,1] = norm(Tr - variance(Z4, regen_times_4), type = "F")
+ 	regVAR2[k,2] = norm(Tr - variance(Z5, regen_times_5), type = "F")
+ 	regVAR2[k,3] = norm(Tr - variance(Z6, regen_times_6), type = "F")
+ 	regVAR2[k,4] = norm(Tr - variance(Z7, regen_times_7), type = "F")
+ 
+ 	BMopt[k,1] = norm(Tr - mcse.multi(dat1e4, method = "bm", r = 1)$cov, type = "F")
+ 	BMopt[k,2] = norm(Tr - mcse.multi(dat1e5, method = "bm", r = 1)$cov, type = "F")
+ 	BMopt[k,3] = norm(Tr - mcse.multi(dat1e6, method = "bm", r = 1)$cov, type = "F")
+ 	BMopt[k,4] = norm(Tr - mcse.multi(dat1e7, method = "bm", r = 1)$cov, type = "F")
+ 
+ 
+ 	BMsq[k,1] = norm(Tr - mcse.multi(dat1e4, method = "bm", r = 1, size = floor((1e4)^(1/2 + .00001)))$cov, type = "F")
+ 	BMsq[k,2] = norm(Tr - mcse.multi(dat1e5, method = "bm", r = 1, size = floor((1e5)^(1/2 + .00001)))$cov, type = "F")
+ 	BMsq[k,3] = norm(Tr - mcse.multi(dat1e6, method = "bm", r = 1, size = floor((1e6)^(1/2 + .00001)))$cov, type = "F")
+ 	BMsq[k,4] = norm(Tr - mcse.multi(dat1e7, method = "bm", r = 1, size = floor((1e7)^(1/2 + .00001)))$cov, type = "F")
+ 
+ 	print(k)
+ 	}
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
