
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1234)
> 
> source("Mean_calc.R")
> library(mcmcse)
> 
> # Initialization
> nsim = 1e7
> x = rep(0, nsim)
> y = rep(0, nsim)
> s = rep(0, nsim)
> 
> 
> x[1] = 5
> y[1] = rnorm(1, 2*x[1], 1)
> s[1] = (pnorm(1, 0, 1/sqrt(5)) - pnorm(-1, 0, 1/sqrt(5))) * exp(-(4*y[1]^{2} + 100*y[1])/100)
> 
> 
> for(i in 2:nsim){
+ 	x[i] = rnorm(1, 2*y[i-1]/5, 1/sqrt(5))
+ 	y[i] = rnorm(1, 2*x[i], 1)
+ 	if(y[i] > 0){
+ 		s[i] = (pnorm(1, 0, 1/sqrt(5)) - pnorm(-1, 0, 1/sqrt(5))) * exp(-(2*y[i]^{2} + 50*y[i])/5)
+ 	}else{
+ 		s[i] = (pnorm(1, 0, 1/sqrt(5)) - pnorm(-1, 0, 1/sqrt(5))) * exp(-(2*y[i]^{2} - 50*y[i])/5)
+ 	}	
+ }
> 
> new_s = Es*s
> 
> # Minorization constants/Regeneration probabilities
> hist(new_s)
> 
> # Regeneration counters
> regens = rbinom(nsim, 1, new_s)
> 
> # Total number of detected regenerations
> sum(regens)
[1] 20186
> 
> T = append(c(0),which(regens == 1)); head(T)
[1]    0 1155 1347 1488 1878 2256
> Z = matrix(0, nrow = sum(regens), ncol = 2); head(Z)
     [,1] [,2]
[1,]    0    0
[2,]    0    0
[3,]    0    0
[4,]    0    0
[5,]    0    0
[6,]    0    0
> 
> for(i in 1:(length(T)-1)){
+ 	for(j in (T[i] + 1):T[i+1]){
+ 		Z[i,1] = Z[i,1] + x[j]
+ 		Z[i,2] = Z[i,2] + y[j]
+ 	}
+ }
> 
> # Individual regeneration times
> regen_times = (which(regens == 1)) - append(c(0), which(regens == 1)[-length(which(regens == 1))])
> 
> # Comparing regeneration mean and sample mean
> colSums(Z)/sum(regen_times); c(mean(x), mean(y))
[1] -0.0005088635 -0.0015381119
[1] -0.0005083618 -0.0015363893
> 
> # Construction of function for regeneration
> variance = function(Z, regen_times){
+ 	R = length(regen_times)
+ 	Z_bar = colMeans(Z)
+ 	A1 = matrix(0, nrow= 2, ncol = 2)
+ 	A2 = matrix(0, nrow= 2, ncol = 2)
+ 	A3 = matrix(0, nrow= 2, ncol = 2)
+ 	for(i in 1:R){
+ 		A1 = A1 + (Z[i,] - Z_bar)%*%t(Z[i,] - Z_bar)
+ 	}
+ 	for (i in 1:(R-1)) {
+ 		A2 = A2 + (Z[i,] - Z_bar)%*%t(Z[i+1,] - Z_bar)
+ 		A3 = A3 + (Z[i+1,] - Z_bar)%*%t(Z[i,] - Z_bar)
+ 	}
+ 	V = A1 + A2 + A3
+ 	return(V/sum(regen_times))
+ }
> 
> 
> # Dataset
> dataset = cbind(x, y); head(dataset)
              x         y
[1,]  5.0000000  9.662560
[2,]  4.3188850  6.888568
[3,]  2.3637571  1.987323
[4,]  0.7473787  1.782509
[5,]  0.3997686 -1.194249
[6,] -0.9289776 -2.046659
> 
> # Comparing regeneration variance with other methods
> variance(Z, regen_times)
          [,1]     [,2]
[1,]  8.753342 19.46247
[2,] 19.462465 43.82599
> mcse.multi(dataset, method = "bm", r = 1)$cov
          [,1]     [,2]
[1,]  8.850567 19.67816
[2,] 19.678158 44.31268
> mcse.multi(dataset, method = "bartlett", r = 1)$cov
       [,1]     [,2]
x  8.796838 19.56460
y 19.564604 44.07282
> mcse.initseq(dataset)$cov
          [,1]     [,2]
[1,]  8.902046 19.77713
[2,] 19.777129 44.49882
> 
> proc.time()
   user  system elapsed 
 84.865   4.149  89.605 
