
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> set.seed(1234)
> 
> library(mcmcse)
> 
> # Initialization
> nsim = 1e7
> x = rep(0, nsim)
> y = rep(0, nsim)
> s = rep(0, nsim)
> 
> x[1] = 5
> y[1] = rnorm(1, 2*x[1], 1)
> s[1] = (pnorm(1, 0, 1/sqrt(5)) - pnorm(-1, 0, 1/sqrt(5))) * exp(-(4*y[1]^{2} + 100*y[1])/100)
> 
> 
> for(i in 2:nsim){
+ 	x[i] = rnorm(1, 2*y[i-1]/5, 1/sqrt(5))
+ 	y[i] = rnorm(1, 2*x[i], 1)
+ 	if(y[i] > 0){
+ 		s[i] = (pnorm(1, 0, 1/sqrt(5)) - pnorm(-1, 0, 1/sqrt(5))) * exp(-(2*y[i]^{2} + 50*y[i])/5)
+ 	}else{
+ 		s[i] = (pnorm(1, 0, 1/sqrt(5)) - pnorm(-1, 0, 1/sqrt(5))) * exp(-(2*y[i]^{2} - 50*y[i])/5)
+ 	}	
+ }
> 
> # Minorization constants/Regeneration probabilities
> hist(s)
> 
> # Regeneration counters
> regens = rbinom(nsim, 1, s)
> 
> # Total number of detected regenerations
> sum(regens)
[1] 345178
> 
> T = append(c(0),which(regens == 1)); head(T)
[1]  0 54 61 65 72 73
> Z = matrix(0, nrow = sum(regens), ncol = 2); head(Z)
     [,1] [,2]
[1,]    0    0
[2,]    0    0
[3,]    0    0
[4,]    0    0
[5,]    0    0
[6,]    0    0
> 
> for(i in 1:(length(T)-1)){
+ 	for(j in (T[i]+1):T[i+1]){
+ 		Z[i,1] = Z[i,1] + x[j]
+ 		Z[i,2] = Z[i,2] + y[j]
+ 	}
+ }
> 
> # Individual regeneration times
> regen_times = (which(regens == 1)) - append(c(0), which(regens == 1)[-length(which(regens == 1))])
> 
> # Comparing regeneration mean and sample mean
> colSums(Z)/sum(regen_times); c(mean(x), mean(y))
[1] -0.001269505 -0.003173460
[1] -0.001269444 -0.003173584
> 
> # Construction of function for regeneration
> variance = function(Z, regen_times){
+ 	R = length(regen_times)
+ 	Z_bar = colMeans(Z)
+ 	A1 = matrix(0, nrow= 2, ncol = 2)
+ 	A2 = matrix(0, nrow= 2, ncol = 2)
+ 	A3 = matrix(0, nrow= 2, ncol = 2)
+ 	for(i in 1:R){
+ 		A1 = A1 + (Z[i,] - Z_bar)%*%t(Z[i,] - Z_bar)
+ 	}
+ 	for (i in 1:(R-1)) {
+ 		A2 = A2 + (Z[i,] - Z_bar)%*%t(Z[i+1,] - Z_bar)
+ 		A3 = A3 + (Z[i+1,] - Z_bar)%*%t(Z[i,] - Z_bar)
+ 	}
+ 	V = A1 + A2 + A3
+ 	return(V/sum(regen_times))
+ }
> 
> 
> # Dataset
> dataset = cbind(x, y); head(dataset)
             x         y
[1,] 5.0000000 8.7929343
[2,] 3.6412438 8.3669288
[3,] 2.2977436 5.0246119
[4,] 2.2361599 3.8975797
[5,] 1.3145707 2.0646894
[6,] 0.4278387 0.3784848
> 
> # Comparing regeneration variance with other methods
> variance(Z, regen_times)
          [,1]     [,2]
[1,]  9.037853 20.08139
[2,] 20.081391 45.17684
> mcse.multi(dataset, method = "bm", r = 1)$cov
          [,1]     [,2]
[1,]  8.904749 19.77454
[2,] 19.774544 44.47097
> mcse.multi(dataset, method = "bartlett", r = 1)$cov
       [,1]     [,2]
x  8.911469 19.81003
y 19.810031 44.59760
> mcse.initseq(dataset)$cov
          [,1]     [,2]
[1,]  8.726182 19.38512
[2,] 19.385125 43.63839
> 
> proc.time()
   user  system elapsed 
 39.133   2.205  41.760 
